% Auto-generated by cameraCalibrator app on 09-Dec-2020
%-------------------------------------------------------


% Define images to process
imageFileNames = {'/home/yuqiang/class/robotics_HW4/pics/(100,400,145.5,180,0,135)-1.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/(100,400,145.5,180,0,135).jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/(300 ,320,145.50,180,0,135).jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-134033.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143134.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143144.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143209.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143330.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143348.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143400.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143911.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143916.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143921.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143925.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143930.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143934.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143939.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143942.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143951.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-143957.jpg',...
    '/home/yuqiang/class/robotics_HW4/pics/2020-12-09-144005.jpg',...
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 2.360000e+01;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', true, ...
    'NumRadialDistortionCoefficients', 3, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortImage(originalImage, cameraParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
